class("autoexpenser::main","widget")
{
	function slotDialogFile(this function catches the signalDialogFile thrown by any object)
	{
		/* autoexpenser::main::slotDialogFile
		
			This function catches when an object sends a signalDialogFile signal.
		
		*/
		
		if (@%debug) {debug -c \n0 = $0\n1 = $1\nsignalSender = @$signalSender\nsignalSender->name = @$signalSender()->$name()\nsignalName = @$signalName()\nthis->className = @$className;}
		
		if ($0)
		{
			%fileName = $0
			%senderHier = $str.split("|",@$signalSender->$name())
			%senderObject = %senderHier[$(%senderHier[]# - 1)]
			switch (%senderObject)
			{
				case ("BankDataFile"):
				{
					@%leBankDataFile->$setText(%fileName)
					@%leBankDataFile->$setCursorPosition(0)
					break;
				}
				default:
				{
					if (@%debug) {debug -c "The object that sent this signal is not known. @%s{msgDebugProb}";}
				}
			}
		}
		else
		{
			debug -c "Argument 0 was null. @%s{msgDebugProb}"
		}
	}
	
	function settingsSaveToDisk(saves the settings hash to disk)
	{
		/* autoexpenser::main::settingsSaveToDisk
			
			this function saves the settings hash to disk.
		
			$0 will contain an integer if the @$signalName is currentChanged (Tab was changed by the user)
			
			@$parent->%intPrevTab contains the tab value prior to this signal being emitted, so it must be updated at the end of this slot code.
			we will use @%intPrevTab to determine which tab we just came from so we can decide what we should do in here.
		
			TABS
			0 = Settings
			1 = Bank Data
		
		*/
		
		%intNewTab = $0
		if (@%debug) {debug -c \n0 = $0\n1 = $1\nsignalSender = @$signalSender\nsignalSender->name = @$signalSender()->$name()\nsignalName = @$signalName()\nthis->className = @$className;}
		
		switch (@%intPrevTab)
		{
			case ("0"):
			{
				# save the settings hash to disk
				%cfg = $config.open(@%s{settingsFile}, rw)
				if (%cfg)
				{
					config.clearsection %cfg settings
					config.setsection %cfg settings
					foreach (%key, $keys(@%s))
					{
						config.write %cfg %key @%s{%key}
					}
					config.close %cfg
				}
				else
				{
					dialog.message -b ("Warning", "Could not open the settings file to save settings to disk.<br/>@%s{msgDebugProb}", $icon("warning"), "/okay...")
					{}
				}
				@%intPrevTab = %intNewTab
				break;
			}
			case ("1"):
			{
				@%intPrevTab = %intNewTab
				break;
			}
			default:
			{
				if (@%debug) {debug -c we don't know which tab we came from. the value we found was: %intPrevTab;}
			}
		}
	}
	
	function settingsCatchChanges(catch setting changes and reflect them into the settings hash)
	{
		/* autoexpenser::main::settingsCatchChanges
		
			this function is a slot for the widgets in the Settings tab, for when their values change.
			the purpose of this function is to catch the changed value and put it into the @%s (settings hash)
			once the user moves focus from the settings tab, all the settings will be saved to disk
		
		*/
		
		#debug -c \n0 = $0\n1 = $1\nsignalSender = @$signalSender\nsignalSender->name = @$signalSender()->$name()
		
		%senderName = @$signalSender()->$name()
		
		%senderHier = $str.split("|",%senderName)
		
		%settingName = %senderHier[$(%senderHier[]# - 1)]
		
		@%s{%settingName} = $0
	}
	
	function constructor(runs when autoExpenser::main object is created)
	{
		/* autoExpenser::main::constructor
			
		*/
		
		### settings
		
		@%s{msgDebugDef}	= "This is a definitely a bug. You should report it to the software developer."
		@%s{msgDebugForgot}	= "If you see this, it means the developer forgot to comment this line."
		@%s{msgDebugProb}	= "This is probably a bug and should be reported to the software developer."
		@%s{osDirSlash}		= "\\"
		@%s{programName}	= "Auto Expenser"
		@%s{programNameDev}	= "autoExpenser"
		@%s{programVersion}	= "v 0.1"
		@%s{settingsFile}	= $file.fixpath($file.homedir()".autoExpenser/settings.conf")
		
		### variable aliases - these are shortened version of some variable names above to make it easier for development
		
		@%a{pnd} 			= @%s{programNameDev}
		
		### class variables
		
		@%debug 			= $true
		@%intPrevTab		= 0
		
		### start up checks
		
		if ($file.exists(@%s{settingsFile}) == $false)
		{
			debug -c settingsFile does not exist
			if ($file.exists($str.lefttolast(@%s{settingsFile}, @%s{osDirSlash})) == $false)
			{
				debug -c program user directory does not exist, attempting to create it
				debug -c we are making: $str.lefttolast(@%s{settingsFile}, @%s{osDirSlash})
				file.mkdir $str.lefttolast(@%s{settingsFile}, @%s{osDirSlash})
			}
		}
		
		### widgets
		
		@$setWindowTitle(@%s{programName} @%s{programVersion})
		@$setGeometry(0,0,560,300)
		@$centerToScreen()
		
		@%l0 = $new(layout, $$, "@%a{pnd} | main | layout 0")
		@%l0->$setSpacing(20)
		
		// create tabWidget
		@%tabwTabs = $new(tabWidget, $$, "@%a{pnd}|main|tabwidget")
		
		// add the tabwidget to the layout of the main window widget
		@%l0->$addMultiCellWidget(@%tabwTabs, 1,1,0,0)
		
		// create tab 'pages'
		@%wgtPageSettings = $new(widget, $$, "@%a{pnd}|main|tabwidget|Page|Settings")
		@%wgtPageBankData = $new(widget, $$, "@%a{pnd}|main|tabwidget|Page|BankData")
		
		// create 'page' layout
		@%lPageSettings = $new(layout, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Layout")
		@%lPageBankData = $new(layout, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|Layout")
		
		// create 'page' child widgets
		
		### Settings tab
			// Local
		@%lblSettingsTitleLocal = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|TitleLocal")
		@%lblSettingsTitleLocal->$setText("<b>Local</b>")
		
		@%lblLocalDatabase = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|localDatabase")
		@%lblLocalDatabase->$setText("Database Location: ")
		
		@%leLocalDatabase = $new(lineedit, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Line Edit|localDatabase")
		@%leLocalDatabase->$setMinimumWidth(50)
		
		@%btnLocalDatabase = $new(button, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Button|localDatabase")
		@%btnLocalDatabase->$setText("Browse")
		
			// Remote
		@%lblSettingsTitleRemote = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|TitleRemote")
		@%lblSettingsTitleRemote->$setText("<b>Remote</b>")
		
		@%lblRemoteDBHost = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|remoteDBHost")
		@%lblRemoteDBHost->$setText("Database Host: ")
		@%leRemoteDBHost = $new(lineedit, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Line Edit|remoteDBHost")
		@%leRemoteDBHost->$setMinimumWidth(50)
		
		@%lblRemoteDBUser = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|remoteDBUser")
		@%lblRemoteDBUser->$setText("Database User: ")
		@%leRemoteDBUser = $new(lineedit, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Line Edit|remoteDBUser")
		@%leRemoteDBUser->$setMinimumWidth(50)
		
		@%lblRemoteDBPass = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|remoteDBPass")
		@%lblRemoteDBPass->$setText("Database Password: ")
		@%leRemoteDBPass = $new(lineedit, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Line Edit|remoteDBPass")
		@%leRemoteDBPass->$setMinimumWidth(50)
		@%leRemoteDBPass->$setEchoMode(Password)
		
		@%lblRemoteDBName = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|remoteDBName")
		@%lblRemoteDBName->$setText("Database Name: ")
		@%leRemoteDBName = $new(lineedit, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Line Edit|remoteDBName")
		@%leRemoteDBName->$setMinimumWidth(50)
		
		@%lblRemoteDBTable = $new(label, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Label|remoteDBTable")
		@%lblRemoteDBTable->$setText("Table Name: ")
		@%leRemoteDBTable = $new(lineedit, @%wgtPageSettings, "@%a{pnd}|main|tabwidget|Page|Settings|Line Edit|remoteDBTable")
		@%leRemoteDBTable->$setMinimumWidth(50)
		
			// page layout settings
		
		@%lPageSettings->$addMultiCellWidget(@%lblSettingsTitleLocal,		0,0,0,2)
		@%lPageSettings->$addMultiCellWidget(@%lblLocalDatabase,			1,1,0,0)
		@%lPageSettings->$addMultiCellWidget(@%leLocalDatabase,			1,1,1,1)
		@%lPageSettings->$addMultiCellWidget(@%btnLocalDatabase,			1,1,2,2)
		@%lPageSettings->$addMultiCellWidget(@%lblSettingsTitleRemote,		2,2,0,2)
		@%lPageSettings->$addMultiCellWidget(@%lblRemoteDBHost,			3,3,0,0)
		@%lPageSettings->$addMultiCellWidget(@%leRemoteDBHost,			3,3,1,1)
		@%lPageSettings->$addMultiCellWidget(@%lblRemoteDBUser,			4,4,0,0)
		@%lPageSettings->$addMultiCellWidget(@%leRemoteDBUser,			4,4,1,1)
		@%lPageSettings->$addMultiCellWidget(@%lblRemoteDBPass,			5,5,0,0)
		@%lPageSettings->$addMultiCellWidget(@%leRemoteDBPass,			5,5,1,1)
		@%lPageSettings->$addMultiCellWidget(@%lblRemoteDBName,			6,6,0,0)
		@%lPageSettings->$addMultiCellWidget(@%leRemoteDBName,			6,6,1,1)
		@%lPageSettings->$addMultiCellWidget(@%lblRemoteDBTable,			7,7,0,0)
		@%lPageSettings->$addMultiCellWidget(@%leRemoteDBTable,			7,7,1,1)
		
		@%lPageSettings->$setRowStretch(0, 0)
		@%lPageSettings->$setRowStretch(1, 1)
		@%lPageSettings->$setColumnStretch(0, 1)
		@%lPageSettings->$setColumnStretch(1, 2)
		@%lPageSettings->$setColumnStretch(2, 0)
		
		@%lPageSettings->$setAlignment(@%lblSettingsTitleLocal,	Bottom)
		@%lPageSettings->$setAlignment(@%lblSettingsTitleRemote,	Bottom)
		
		### Bank data tab
		
		@%lblBankDataFile = $new(label, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|Label|BankDataFile")
		@%lblBankDataFile->$setText("Bank Data File: ")
		
		@%leBankDataFile = $new(lineedit, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|Line Edit|BankDataFile")
		@%leBankDataFile->$setMinimumWidth(50)
		
		@%btnBankDataFile = $new(button, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|Button|BankDataFile")
		@%btnBankDataFile->$setText("Browse")
		
		@%lblBankDataSepType = $new(label, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|Label|BankDataSepType")
		@%lblBankDataSepType->$setText("Seperator: ")
		@%coboBankDataSepType = $new(combobox, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|ComboBox|BankDataSepType")
		@%coboBankDataSepType->$insertItem("Comma")
		@%coboBankDataSepType->$insertItem("Pipe")
		@%coboBankDataSepType->$insertItem("Tab")
		
		@%cbBankDataFirstLine = $new(checkbox, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|CheckBox|BankDataFirstline")
		@%cbBankDataFirstLine->$setText("First line has column titles")
		
		@%btnBankDataLoad = $new(button, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|Button|BankDataLoad")
		@%btnBankDataLoad->$setText("Load Data")
		
		@%bdtBankDataTable = $new(autoexpenser::bankdatatable, @%wgtPageBankData, "@%a{pnd}|main|tabwidget|Page|BankData|bankdatatable|BankDataTable")
		
			// page layout settings
		
		@%lPageBankData->$addMultiCellWidget(@%lblBankDataFile,		0,0,0,0)
		@%lPageBankData->$addMultiCellWidget(@%leBankDataFile,		0,0,1,1)
		@%lPageBankData->$addMultiCellWidget(@%btnBankDataFile,		0,0,2,2)
		@%lPageBankData->$addMultiCellWidget(@%lblBankDataSepType,		1,1,0,0)
		@%lPageBankData->$addMultiCellWidget(@%coboBankDataSepType,	1,1,1,2)
		@%lPageBankData->$addMultiCellWidget(@%cbBankDataFirstLine,	2,2,0,2)
		@%lPageBankData->$addMultiCellWidget(@%btnBankDataLoad,		3,3,0,2)
		@%lPageBankData->$addMultiCellWidget(@%bdtBankDataTable,		4,6,0,2)
		
		// add 'pages' to tabwidget
		@%tabwTabs->$addTab(@%wgtPageSettings, "Settings")
		@%tabwTabs->$addTab(@%wgtPageBankData, "Bank Data")
		
		### objects connect
		
		objects.connect @%btnBankDataFile clicked $$ browseButtonClicked
		objects.connect @%btnBankDataFile signalDialogFile $$ slotDialogFile
		objects.connect @%leLocalDatabase textChanged $$ settingsCatchChanges
		objects.connect @%tabwTabs currentChanged $$ settingsSaveToDisk
		
		### main run
		@$show()
	}
	
	function browseButtonClicked(handles a browse button that is used to look for a file)
	{
		/* autoexpenser::main::browseButtonClicked
		
			This function is a slot to handle when a "Browse" button is clicked when the user wants to search for a file.
		*/
		
		#if (@%debug) {debug -c \n0 = $0\n1 = $1\nsignalSender = @$signalSender\nsignalSender->name = @$signalSender()->$name()\nsignalName = @$signalName()\nthis->className = @$className;}
		
		dialog.file -b ("Open", "Open File...",,, @$signalSender, @%s{msgDebugForgot}, @%s{msgDebugDef})
		{
			// dev-note:	$0 contains the absolute path to the chosen file. if the user cancels, $0 will be null
			//			$1 will contain the signalSender name, so we can determine what we should do with $0 if it exists
			//			$2 contains a debug message string
			//			$3 contains a debug message string
			if ($0)
			{
				if ($1)
				{
					%signalSender = $1
					%signalSender->$emit("signalDialogFile", $0)
				}
				else
				{
					debug -c "Argument 1 was null. This is a problem because we don't know which widget asked for the file. $3"
				}
			}
			else
			{
				debug -c "No filename was returned, user must have cancelled the selection. $2"
			}
		
		}
	}
	
}

class("autoexpenser::common","object")
{
}

class("autoexpenser::bankdatatable","tablewidget")
{
	function constructor(runs when the bankdatatable object is created)
	{
		/* autoexpenser::bankdatatable
		
		*/
		
		@%columnTitles = $array()
		
		@$setColumnCount(@%columnTitles[]#)
		@$setHorizontalHeaderLabels(@%columnTitles)
	}
	
}

